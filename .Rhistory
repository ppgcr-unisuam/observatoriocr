options(knitr.kable.NA = '--', knitr.table.format = "html")
discentes.raw <-
read_excel("../PPGCR Unisuam/Discentes.xlsx", sheet = "DATA.discentes")
discentes <- discentes.raw[discentes.raw$`Ano Titulação` != "*", ]
mestres <- discentes[discentes$Curso == "Mestrado", ]
doutores <- discentes[discentes$Curso == "Doutorado", ]
par(
oma = c(2, 0.1, 2, 0.1),
mar = c(5, 4, 2, 2),
bg = '#2C3E50',
col.lab = "white",
col.axis = "white",
fg = "white",
col.main = "white"
)
# generate plot of titulados per year
table.1 <- table(discentes$Curso, discentes$`Ano Titulação`)
barplot(
as.matrix(table.1),
xlab = "Ano",
ylab = "Titulados",
col = c("darkblue", "lightblue"),
bty = "n"
)
legend(
"topleft",
legend = levels(as.factor(discentes$Curso)),
fill = c("darkblue", "lightblue"),
box.lty = 0
)
cat("<br>")
cat('<hr style="height:2px;border-width:0;color:white;background-color:white">')
cat("<br>")
cat("<h1 style='text-align:center;'> **Tempo médio de titulação, por ano** </h1>  \n")
par(
oma = c(2, 0.1, 2, 0.1),
mar = c(5, 4, 2, 2),
bg = '#2C3E50',
col.lab = "white",
col.axis = "white",
fg = "white",
col.main = "white"
)
# generate plot of tempo para titulação per year
tmt.mestr.ano <-
aggregate(
as.numeric(mestres$`Tempo de Curso (meses)`),
by = list(mestres$`Ano Titulação`),
FUN = mean,
na.rm = TRUE
)
tmt.dout.ano <-
aggregate(
as.numeric(doutores$`Tempo de Curso (meses)`),
by = list(doutores$`Ano Titulação`),
FUN = mean,
na.rm = TRUE
)
plot(
tmt.mestr.ano$Group.1,
tmt.mestr.ano$x,
type = "l",
lty = 1,
lwd = 6,
xlab = "Ano",
ylab = "Meses",
col = c("lightblue"),
ylim = c(18, 60),
bty = "n"
)
lines(
tmt.dout.ano$Group.1,
tmt.dout.ano$x,
type = "l",
lty = 1,
lwd = 6,
xlab = "Ano",
ylab = "Meses",
col = c("darkblue"),
ylim = c(18, 60)
)
legend(
"topleft",
legend = levels(as.factor(discentes$Curso)),
col = c("darkblue", "lightblue"),
pch = "lines",
lwd = 6,
box.lty = 0
)
cat("<br>")
cat('<hr style="height:2px;border-width:0;color:white;background-color:white">')
cat("<br>")
# code for html anchor from yml file
cat('<div id="egressos" class="section level2">', sep = "")
cat('<h2></h2>')
cat('<h1> [**Egressos**](pessoas.html#egressos) </h1>')
par(
oma = c(0, 0, 0, 0),
mar = c(0, 0, 0, 0),
bg = '#2C3E50',
col.lab = "white",
col.axis = "white",
fg = "white",
col.main = "white"
)
datasets <- list_geobr()$years[3]
last.update <-
as.numeric(strsplit(datasets, ", ")[[1]][length(strsplit(datasets, ", ")[[1]]) - 1])
states <-
read_state(
code_state = "all",
year = last.update,
simplified = TRUE,
showProgress = FALSE
)
states <-
read_state(
code_state = "all",
year = last.update,
simplified = TRUE,
showProgress = FALSE
)
states <-
read_state(
code_state = "all",
year = last.update,
simplified = TRUE,
showProgress = FALSE
)
# read packages
library(knitr)
library(kableExtra)
library(kableExtra)
library(magrittr)
library(readxl)
library(tidyverse)
library(tidyverse)
# read SCImago csv file (download from https://www.scimagojr.com)
scimago <-
read.csv(
"SJR/scimagojr 2020.csv",
header = TRUE,
sep = ";",
quote = "\"",
dec = ",",
fill = TRUE
)
# read QUALIS xlsx file (donwload from https://www.scimagojr.com)
qualis <-
data.frame(read_excel(
"Qualis/QUALIS Referência 2017-2018.xlsx",
sheet = 1,
col_types = c("text")
))
# Step 4. Read in a CSV file into a data frame with a bunch of dois listed in one column.
dois <-
data.frame(read_excel(
"../PPGCR Unisuam/Produção.xlsx",
sheet = "PI.artigos",
col_types = c("text")
))
# Data cleaning
dois <- dois[complete.cases(dois$DOI),]
# Filtra por período
dois <- dois[dois$Publicado.em <= 2009,]
# Verifica se há DOIs no período
if (dim(dois)[1] == 0) {
cat('\n')
cat('*Sem produção para exibir no período*')
cat('\n')
} else {
# Step 5. Convert the doi column in your dataset to a list.
dois_list <- as.list(dois$DOI)
# roda o script para obter dados do Altmetric
source("scripts/altmetrics_using_doi.R")
# remove duplicate entries
doi_unique <-
doi_reshaped_data[!duplicated(doi_reshaped_data$doi), ]
# sort columns by title
doi_sort <-
doi_unique[order(doi_unique$title), ]
# get data of papers without Altmetrics from CrossRef
my_dois_works <-
rcrossref::cr_works(dois = unlist(no_altmetric_dois_list)) %>%
pluck("data")
# sort columns by title
my_dois_works <-
my_dois_works[order(as.vector(my_dois_works$title)), ]
# print table of papers with/without badges
source("scripts/table_with_badges.R")
}
numeric(0)
#Dummy data
Ixos <- rnorm(4000,100,30)
Primadur <- Ixos+rnorm(4000 , 0 , 30)
#Divide the screen in 1 line and 2 columns
par(
mfrow=c(1,2),
oma = c(0, 0, 2, 0)
)
#Make the margin around each graph a bit smaller
par(mar=c(4,2,2,2))
# Histogram and Scatterplot
hist(Ixos,  main="" , breaks=30 , col=rgb(0.3,0.5,1,0.4) , xlab="height" , ylab="nbr of plants")
plot(Ixos , Primadur,  main="" , pch=20 , cex=0.4 , col=rgb(0.3,0.5,1,0.4)  , xlab="primadur" , ylab="Ixos" )
#And I add only ONE title :
mtext("Primadur : Distribution and correlation with Ixos", outer = TRUE, cex = 1.5, font=4, col=rgb(0.1,0.3,0.5,0.5) )
#Dummy data
Ixos <- rnorm(4000,100,30)
Primadur <- Ixos+rnorm(4000 , 0 , 30)
#Divide the screen in 1 line and 2 columns
par(
mfrow=c(1,2),
oma = c(0, 0, 2, 0)
)
#Make the margin around each graph a bit smaller
par(mar=c(0,0,0,0))
# Histogram and Scatterplot
hist(Ixos,  main="" , breaks=30 , col=rgb(0.3,0.5,1,0.4) , xlab="height" , ylab="nbr of plants")
plot(Ixos , Primadur,  main="" , pch=20 , cex=0.4 , col=rgb(0.3,0.5,1,0.4)  , xlab="primadur" , ylab="Ixos" )
#And I add only ONE title :
mtext("Primadur : Distribution and correlation with Ixos", outer = TRUE, cex = 1.5, font=4, col=rgb(0.1,0.3,0.5,0.5) )
warnings()
plot(c(100, 250), c(300, 450), type = "n", xlab = "", ylab = "")
image <- as.raster(matrix(0:1, ncol = 5, nrow = 3))
rasterImage(image, 100, 300, 150, 350, interpolate = FALSE)
install.packages(c("lavaan", "pillar", "RcppArmadillo", "renv", "rpart", "yaml"))
install.packages(c("lavaan", "pillar", "RcppArmadillo", "renv", "rpart", "yaml"))
library(devtools)
install_github("r-spatial/sf", configure.args = "--with-proj-lib=/usr/local/lib/")
install.packages("sf", configure.args = "--with-proj-lib=/usr/local/lib/")
# create a new code chunk and then use the PACKUP add-in to generate this code with all the required libraries for this Rmd
library(bsplus)
library(cowplot)
library(dplyr)
library(geobr)
library(ggplot2)
library(ggpubr)
library(grid)
library(gridExtra)
library(gtsummary)
library(htmlwidgets)
library(igraph)
library(kableExtra)
library(knitr)
library(magrittr)
library(RColorBrewer)
library(readxl)
library(Rmisc)
library(sf)
library(tm)
library(viridis)
library(webshot2)
library(wordcloud2)
options(knitr.kable.NA = '--', knitr.table.format = "html")
options(scipen = 10)
financiadores.raw <-
read_excel("../PPGCR Unisuam/Financiadores.xlsx", sheet = "DADOS.fomento")
# select variables to display, by AGENCIA & PROGRAMA
financiadores <-
financiadores.raw %>% select("Agência", "Total", "Programa")
# drop rows with empty cells
financiadores <- financiadores[complete.cases(financiadores), ]
# generate table
table.1 <-
tbl_summary(
financiadores,
by = "Agência",
type = all_continuous() ~ "continuous2",
statistic = list(
all_continuous() ~ c("R$ {sum}", "{min}", "{max}"),
all_categorical() ~ c("{n}")
),
missing = "no",
digits = "Total" ~ 2,
sort = all_categorical() ~ "frequency"
) %>%
add_overall(TRUE, "Total") %>%
modify_header(label = "**Agência**") %>%
bold_labels()
editais.agencia <- table(financiadores$'Agência')
table.1
editais.agencia
# projetos - membros
sheet <- "Projetos - Membros"
source("Scripts/read_sucupira.R")
source("Scripts/read_sucupira.R")
projetos.list <- sucupira.list
# list all available years
anos <-
as.numeric(list.dirs(
file.path(getwd(), "Sucupira"),
recursive = FALSE,
full.names = FALSE
))
# list all available years
anos <-
as.numeric(list.dirs(
file.path(getwd(), "Sucupira"),
recursive = FALSE,
full.names = FALSE
))
# get all history of 'linha de pesquisa'
linhas <- na.exclude(unique(sucupira.raw$`Linha de Pesquisa`))
# initialize data structure
andamento.ano <-
matrix(NA, nrow = length(linhas), ncol = length(anos))
colnames(andamento.ano) <- anos
rownames(andamento.ano) <- linhas
concluido.ano <- andamento.ano
# iterate across all Sucupira list elements to search for active and closed projects
for (i in 1:length(anos)) {
projetos <- projetos.list[[i]]
projetos <-
projetos[projetos$`Membro Responsável` == "Sim" &
projetos$Situação == "EM ANDAMENTO",]
for (j in 1:length(linhas)) {
andamento.ano[j, i] <-
sum(projetos$`Linha de Pesquisa` == linhas[j], na.rm = TRUE)
}
projetos <- projetos.list[[i]]
projetos <-
projetos[projetos$`Membro Responsável` == "Sim" &
projetos$Situação == "CONCLUÍDO",]
for (j in 1:length(linhas)) {
concluido.ano[j, i] <-
sum(projetos$`Linha de Pesquisa` == linhas[j], na.rm = TRUE)
}
}
projetos.ano <- andamento.ano + concluido.ano
projetos.ano <-
projetos.ano[, order(colnames(projetos.ano), decreasing = FALSE)]
projetos.ano
options(knitr.kable.NA = '--', knitr.table.format = "html")
options(scipen = 10)
financiadores.raw <-
read_excel("../PPGCR Unisuam/Financiadores.xlsx", sheet = "DADOS.fomento")
colnames(financiadores.raw)
editais.agencia <- table(financiadores$'Ano', financiadores$'Agência')
options(scipen = 10)
financiadores.raw <-
read_excel("../PPGCR Unisuam/Financiadores.xlsx", sheet = "DADOS.fomento")
# select variables to display, by AGENCIA & PROGRAMA
financiadores <-
financiadores.raw %>% select("Ano", "Agência", "Total", "Programa")
# drop rows with empty cells
financiadores <- financiadores[complete.cases(financiadores), ]
editais.agencia <- table(financiadores$'Ano', financiadores$'Agência')
editais.agencia
editais.agencia <- table(financiadores$'Agência', financiadores$'Ano')
editais.agencia <- table(financiadores$'Agência', financiadores$'Ano')
editais.agencia
editais.agencia.ano <- table(financiadores$'Agência', financiadores$'Ano')
editais.agencia.ano <-
editais.agencia.ano[, order(colnames(editais.agencia.ano), decreasing = FALSE)]
editais.agencia.ano
# get all 'agencias'
agencias <-
na.exclude(rownames(editais.agencia.ano))
agencias
financiadores
# generate cross-table
editais.agencia.ano <- aggregate(sum~financiadores$'Agência'+financiadores$'Ano', data = financiadores)
# generate cross-table
editais.agencia.ano <- aggregate(financiadores$Total ~ financiadores$'Agência' + financiadores$'Ano', data = financiadores)
# generate cross-table
editais.agencia.ano <- aggregate(financiadores$Total ~ financiadores$'Agência' + financiadores$'Ano', data = financiadores, FUN = sum)
editais.agencia.ano
# generate cross-table
T.editais.agencia.ano <- t(aggregate(financiadores$Total ~ financiadores$'Agência' + financiadores$'Ano', data = financiadores, FUN = sum))
T.editais.agencia.ano
# generate cross-table
T.editais.agencia.ano <- aggregate(financiadores$Total ~ financiadores$'Ano' + financiadores$'Agência', data = financiadores, FUN = sum)
T.editais.agencia.ano
table(T.editais.agencia.ano$`financiadores$Ano`, T.editais.agencia.ano$`financiadores$Agência`)
table(T.editais.agencia.ano$`financiadores$Ano`, T.editais.agencia.ano$`financiadores$Total`)
table(T.editais.agencia.ano$`financiadores$Ano`)
T.editais.agencia.ano
table(T.editais.agencia.ano, T.editais.agencia.ano$`financiadores$Ano`)
summary(T.editais.agencia.ano)
summary(T.editais.agencia.ano$`financiadores$Ano`)
summary(T.editais.agencia.ano$`financiadores$Agencia`)
summary(T.editais.agencia.ano$`financiadores$Agência`)
summary(T.editais.agencia.ano$`financiadores$Total`)
summary(T.editais.agencia.ano)
aggregate(T.editais.agencia.ano$`financiadores$Total`, by=list(Group=T.editais.agencia.ano$`financiadores$Ano`, T.editais.agencia.ano$`financiadores$Agência`), FUN=sum)
aggregate(T.editais.agencia.ano$`financiadores$Total`, by=list(Group=T.editais.agencia.ano$`financiadores$Ano`), FUN=sum)
aggregate(T.editais.agencia.ano$`financiadores$Total`, by=list(Group=T.editais.agencia.ano$`financiadores$Agency`), FUN=sum)
aggregate(T.editais.agencia.ano$`financiadores$Total`, by=list(T.editais.agencia.ano$`financiadores$Agência`), FUN=sum)
aggregate(T.editais.agencia.ano$`financiadores$Total`, by=list(T.editais.agencia.ano$`financiadores$Agência`, T.editais.agencia.ano$`financiadores$Ano`), FUN=sum)
# generate cross-table
T.editais.agencia.ano <- aggregate(financiadores$Total ~ financiadores$'Ano' + financiadores$'Agência', data = financiadores, FUN = sum)
T.editais.agencia.ano <- aggregate(financiadores$Total ~ financiadores$'Ano' + financiadores$'Agência', data = financiadores, FUN = sum, simplify = TRUE)
T.editais.agencia.ano
cbind(financiadores$'Ano', financiadores$'Agencia') ~ financiadores$'Total'
aggregate(cbind(financiadores$'Ano', financiadores$'Agencia') ~ financiadores$'Total')
aggregate(cbind(financiadores$'Ano', financiadores$'Agencia') ~ financiadores$'Total', FUN = sum)
T.editais.agencia.ano <- aggregate(financiadores$Total ~ financiadores$'Ano' + financiadores$'Agência', data = financiadores, FUN = sum)
T.editais.agencia.ano
temp <- table(T.editais.agencia.ano$`financiadores$Ano`, T.editais.agencia.ano$`financiadores$Agência`)
temp
temp <- table(T.editais.agencia.ano$`financiadores$Agência`, T.editais.agencia.ano$`financiadores$Ano`)
temp
match(rownames(temp), T.editais.agencia.ano$`financiadores$Agência`)
match(colnames(temp), T.editais.agencia.ano$`financiadores$Ano`)
with(financiadores, tapply(financiadores$Total, list(financiadores$'Ano', financiadores$'Agência'), FUN= sum()))
with(financiadores, tapply(financiadores$Total, list(financiadores$'Ano', financiadores$'Agência'), FUN= sum)
)
with(financiadores, tapply(financiadores$Total, list(financiadores$'Ano', financiadores$'Agência'), FUN= sum))
with(financiadores, tapply(financiadores$Total, list(financiadores$'Agência', financiadores$'Ano', ), FUN= sum))
with(financiadores, tapply(financiadores$Total, list(financiadores$'Agência', financiadores$'Ano'), FUN= sum))
# generate cross-table
T.editais.agencia.ano <- with(financiadores, tapply(financiadores$Total, list(financiadores$'Agência', financiadores$'Ano'), FUN= sum))
T.editais.agencia.ano
T.editais.agencia.ano[is.na(T.editais.agencia.ano)] <- 0
T.editais.agencia.ano
T.editais.agencia.ano
T.editais.agencia.ano/1000
T.editais.agencia.ano
T.editais.agencia.ano/100
options(knitr.kable.NA = '--', knitr.table.format = "html")
# for displaying large numbers
options(scipen = 10)
financiadores.raw <-
read_excel("../PPGCR Unisuam/Financiadores.xlsx", sheet = "DADOS.fomento")
# select variables to display
financiadores <-
financiadores.raw %>% select("Ano", "Agência", "Total", "Programa", "Proponente")
# drop rows with empty cells
financiadores <- financiadores[complete.cases(financiadores), ]
# generate cross-table
N.editais.agencia.ano <- table(financiadores$'Agência', financiadores$'Ano')
N.editais.agencia.ano <-
N.editais.agencia.ano[, order(colnames(N.editais.agencia.ano), decreasing = FALSE)]
# get all 'agencias'
agencias <-
na.exclude(rownames(N.editais.agencia.ano))
# plot area setup
par(
oma = c(2, 0.1, 2, 0.1),
mar = c(5, 4, 2, 2),
bg = '#2C3E50',
col.lab = "white",
col.axis = "white",
fg = "white",
col.main = "white"
)
# generate plot of financiamentos per agency by year (absolute frequency)
barplot(N.editais.agencia.ano,
ylab = "N",
col = brewer.pal(n = length(agencias), name = "Set3"))
title(main = "Editais Financiados por Agência", outer = TRUE, cex.main = 1.7)
legend(
"topright",
legend = agencias,
fill = brewer.pal(n = length(agencias), name = "Set3"),
text.col = "white",
box.lwd = 0,
bty = "n",
horiz = FALSE,
cex = 0.5,
)
# generate cross-table
T.editais.agencia.ano <- with(financiadores, tapply(financiadores$Total, list(financiadores$'Agência', financiadores$'Ano'), FUN= sum))
# add zero to not available values
T.editais.agencia.ano[is.na(T.editais.agencia.ano)] <- 0
T.editais.agencia.ano <-
T.editais.agencia.ano[, order(colnames(T.editais.agencia.ano), decreasing = FALSE)]
# em milhares
T.editais.agencia.ano <- T.editais.agencia.ano/1000
# get all 'agencias'
agencias <-
na.exclude(rownames(T.editais.agencia.ano))
# plot area setup
par(
oma = c(2, 0.1, 2, 0.1),
mar = c(5, 4, 2, 2),
bg = '#2C3E50',
col.lab = "white",
col.axis = "white",
fg = "white",
col.main = "white"
)
# generate plot of financiamentos per agency by year (absolute frequency)
barplot(T.editais.agencia.ano,
ylab = "R$, em milhares",
col = brewer.pal(n = length(agencias), name = "Set3"))
title(main = "Valores Financiados por Agência", outer = TRUE, cex.main = 1.7)
legend(
"topright",
legend = agencias,
fill = brewer.pal(n = length(agencias), name = "Set3"),
text.col = "white",
box.lwd = 0,
bty = "n",
horiz = FALSE,
cex = 0.5,
)
# # generate plot of total per professor
professores.ano <-
rowSums(table(financiadores$Ano, financiadores$Proponente) != 0)
professores.ano
dim(professores.ano)[1]
nrows(professores.ano)
nrow(professores.ano)
dim(professores.ano)
professores.ano
length(professores.ano)
rep(brewer.pal(n = 1, name = "Set3"), length(professores.ano))
col = rep(brewer.pal(name = "Set3")[1], length(professores.ano))
col = rep(brewer.pal(n = 9, name = "Set3")[1], length(professores.ano))
rep(brewer.pal(n = 9, name = "Set3")[1], length(professores.ano))
